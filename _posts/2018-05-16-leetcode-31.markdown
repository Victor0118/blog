---
layout: post
title:  "31. Next Permutation 解题报告"
date:   2018-05-16 10:00:00
categories: leetcode
---


## 题目信息

> * 链接：[Next Permutation](https://leetcode.com/problems/next-permutation/description/)
> * 来源：LeetCode
> * 难度：Medium
> * 描述：求一个数字数组的下一个比他更大一个的排序状态，要求in-place做，常数空间

## 解题思路
1. 从后往前找，找到下降的位置，替换该位置的数和后面的比该数大的最小的数，对后面的数排序即可

## 复杂度分析
时间复杂度O(nlogn)，空间复杂度O(1)

## 细节处理
1. 如果没有下降（原数组降序排列），则输出原数组的升序排列
2. 相等的情况

## 心得体会
1. python的list不能用sort()方法对子串进行排序，nums[0:].sort()也不行
2. 喵了一眼题解还有O(n)的解法，暂时没有想出来

## AC代码

``` python
class Solution:
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        flag = False
        for i in range(len(nums) - 2, -1, -1):
            if nums[i + 1] > nums[i]:
                minLarger = -1
                minInd = 0
                print("i: {}".format(i))
                for j in range(i, len(nums)):
                    if nums[j] > nums[i]:
                        if nums[j] < minLarger or minLarger == -1:
                            minLarger = nums[j] 
                            minInd = j
                nums[i], nums[minInd] = nums[minInd], nums[i]
                # nums[i+1:].sort() 这一步做到，换成下面的代码似乎就不是in-place的算法了？
                nums[i+1:] = sorted(nums[i+1:])
                flag = True
                break
        if not flag:
            nums.sort()
        return 
            

```



[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

