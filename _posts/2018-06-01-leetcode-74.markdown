---
layout: post
title:  "74. Search a 2D Matrix Report"
date:   2018-06-01 22:00:00
categories: leetcode
---


## Problem Information

> * Link: [Search a 2D Matrix](https://leetcode.com/problems/search-a-2d-matrix/description/)
> * Source: LeetCode
> * Difficulty: Medium
> * Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
> Integers in each row are sorted from left to right.
> The first integer of each row is greater than the last integer of the previous row.
```
Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
```

## Solution
1. Start from the right top corner or left bottom corner and do binary search

## Complexity Analysis
Time complexity: O(log(N * M))

## Details
1. The matrix could be []
2. The matrix could be [[]]

## AC Code

``` python
class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        i = 0
        if len(matrix) == 0:
            return False
        
        if len(matrix[0]) == 0:
            return False
        
        j = len(matrix[0]) - 1
        
        while True:
            if matrix[i][j] == target:
                return True
            
            if matrix[i][j] > target:
                j -= 1
            else:
                i += 1
                
            if j < 0 or i >= len(matrix):
                return False
                    
```



[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

