---
layout: post
title:  "12. Integer to Roman 解题报告"
categories: leetcode
---


## 题目信息

> * 链接：[Integer to Roman](https://leetcode.com/problems/integer-to-roman/description/)
> * 来源：LeetCode
> * 难度：Medium
> * 描述：把4000以内的数字转化成罗马数字

## 解题思路
1. 分类4, 9处理就好

## 复杂度分析
时间复杂度O(length of integer)

## 细节处理
1. python3要用int()强制转化除法的结果为整数，python3可以对浮点数取余

## AC代码

``` python
class Solution:
    def intToRoman(self, num):
        """
        :type num: int
        :rtype: str
        """
        res = ""
        one = ["I", "X", "C", "M"]
        five = ["V", "L", "D"]
        i = 0
        while num > 0:
            n = num % 10
            res_tmp = ""
            if n == 4:
                res_tmp = one[i] + five[i]
            elif n == 9:
                res_tmp = one[i] + one[i+1]
            elif n >= 5:
                res_tmp = five[i] + "".join([one[i] for j in range(n - 5)])
            else:
                res_tmp = "".join([one[i] for j in range(n)])
            res = res_tmp + res
            i += 1
            num = int(num / 10)
        return res
```

## 思路整理
目前的代码是按结果分为[0, 4), 4, [5, 9), 9 四种情况分析，接近于提取规律的写法。但是鉴于本身数字范围不算很大，应该可以直接通过查表的方式实现。例如： Is = [I, II, III, IV, V, VI, VII, VIII, IX]
Xs = [X, XX, XXX, XL, L, LX, LXX, LXXX, XC]
Cs = [C, CC, CCC, CD, D, DC, DCC, DCCC, CM]
Ms = [M, MM, MMM]
(有点流氓)

## AC代码2
```
class Solution:
    def intToRoman(self, num):
        """
        :type num: int
        :rtype: str
        """
        
        if not num: return ''
        
        d = {1: 'I',
             5: 'V',
             10: 'X',
             50: 'L',
             100: 'C',
             500: 'D',
             1000: 'M'}
        
        dividers = [1000, 500, 100, 50, 10, 5, 1]
        
        res = ''
        i = 0
        
        while i < len(dividers):
            divider = dividers[i]
            # print(divider, int(num / divider))
            
            if int(num / divider) < 4:
                res += int(num / divider) * d[divider]
            elif int(num / divider) == 4:
                res += d[dividers[i]] + d[dividers[i - 1]]
            elif int(num / divider) < 9:
                res += d[dividers[i - 1]] + d[dividers[i]] * (int(num / divider) - 5)
            else:
                res += d[dividers[i]] + d[dividers[i - 2]]
            num %= divider
            i += 2
        return res
```

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

