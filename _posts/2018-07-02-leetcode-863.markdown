---
layout: post
title:  "863. All Nodes Distance K in Binary Tree"
date:   2018-07-02 22:00:00
categories: leetcode
---


## Problem Information

> * Link: [All Nodes Distance K in Binary Tree](https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/description/)
> * Source: LeetCode
> * Difficulty: Medium
> * Description: We are given a binary tree (with root node root), a target node, and an integer value `K`.
Return a list of the values of all nodes that have a distance K from the target node.  The answer can be returned in any order.



```
Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2
Output: [7,4,1]
Explanation: 
The nodes that are a distance 2 from the target node (with value 5)
have values 7, 4, and 1.

Note that the inputs "root" and "target" are actually TreeNodes.
The descriptions of the inputs above are just serializations of these objects.
```

Note:

* The given tree is non-empty.
* Each node in the tree has unique values 0 <= node.val <= 500.
* The target node is a node in the tree.
* 0 <= K <= 1000.

## Solution
1. Find the target node
2. Write a function: search the child node with distance K to the root node
3. For all nodes from root to the target node, call funtion 2 with proper K

## Complexity Analysis
Time complexity: O(N^2). Space complexity: O(1).

## Edge Case
1. Target is the root node

## Thoughts
1. It takes me a long time to solve this problem, due to the path recording, backtracking and a clear idea
2. There might be better solutions.

## AC Code

``` python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def find(self, node, curK, K, forbid=-1):
        res = []
        if node is None or node.val == forbid:
            return res
        if curK < K:
            res.extend(self.find(node.left, curK + 1, K, forbid))
            res.extend(self.find(node.right, curK + 1, K, forbid))
        else:
            return [node.val]
        return res
            
    def search(self, node, target, path, K):
        res = []
        if node is None:
            return []
        path.append(node)
        if node == target:
            if K == 0:
                return [node.val]
            res.extend(self.find(node.right, 1, K))
            res.extend(self.find(node.left, 1, K))
            for i in range(len(path) - 1):
                if K - (len(path) - i - 1) >= 0:
                    forbid = path[i+1].val
                    res.extend(self.find(path[i], 0, K - (len(path) - i - 1), forbid))
            return res
        else:
            res.extend(self.search(node.left, target, path, K))
            res.extend(self.search(node.right, target, path, K))
            path.remove(node)
            return res
        
    def distanceK(self, root, target, K):
        """
        :type root: TreeNode
        :type target: TreeNode
        :type K: int
        :rtype: List[int]
        """
        path = []
        print(target)
        return self.search(root, target, path, K)
        
```



[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

