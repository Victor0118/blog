---
layout: post
title:  "116. Populating Next Right Pointers in Each Node"
date:   2018-06-16 23:00:00
categories: leetcode
---


## Problem Information

> * Link: [Populating Next Right Pointers in Each Node](https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/)
> * Source: LeetCode
> * Difficulty: Medium
> * Description: Given a binary tree


```

struct TreeLinkNode {
  TreeLinkNode *left;
  TreeLinkNode *right;
  TreeLinkNode *next;
}

```
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

#### Note:

* You may only use constant extra space.
* Recursive approach is fine, implicit stack space does not count as extra space for this problem.
* You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).

```
Given the following perfect binary tree,
     1
   /  \
  2    3
 / \  / \
4  5  6  7
After calling your function, the tree should look like:

     1 -> NULL
   /  \
  2 -> 3 -> NULL
 / \  / \
4->5->6->7 -> NULL
```


## Thoughts
1. Will work on this in the future

## Complexity Analysis 1
Time complexity: O(N). Space complexity: O(1).

## TLE Code

``` python
# Definition for binary tree with next pointer.
# class TreeLinkNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
#         self.next = None

class Solution:
    # @param root, a tree link node
    # @return nothing
    def connect(self, root, tail=None):
        if root is None:
            return None
        
        head = root 
        if not tail or tail == root:
            tail = root.next
            
        tail_child = None
        while tail:
            if tail.left:
                tail_child = tail.left
                break
            elif tail.right:
                tail_child = tail.right
                break
            tail = tail.next
                
        if root.left:
            if root.right:
                root.left.next = root.right
                root.right.next = tail_child
            else:
                root.left.next = tail_child
        elif root.right:
            root.right.next = tail_child
        
        self.connect(root.next, tail)
        if root.left:
            self.connect(root.left)
        else:
            self.connect(root.right)
        
```



[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

