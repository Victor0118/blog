---
layout: post
title:  "75. Sort Colors"
date:   2018-06-05 24:00:00
categories: leetcode
---


## Problem Information

> * Link: [Sort Colors](https://leetcode.com/problems/sort-colors/description/)
> * Source: LeetCode
> * Difficulty: Medium
> * Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue. Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.


```
Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
```

Follow up:

> A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.
> Could you come up with a one-pass algorithm using only constant space?

## Solution
1. Two points. One for 0 and one for 2.

## Complexity Analysis
Time complexity: O(N). One pass.

## Experience
1. There are many edge cases in the problem. The idea is straightforward but it is triky to implement considering the necessary judgement below.

## AC Code

``` python
class Solution(object):
    def sortColors(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        i, i1, i2 = 0, 0, len(nums) - 1
        while i <= i2:
            print(nums, i, i1, i2)
            if nums[i] == 0:
                nums[i], nums[i1] = nums[i1], nums[i]
                i1 += 1
                # necessary judgement
                if i <= i1:
                    i = i1
            elif nums[i] == 2:
                nums[i], nums[i2] = nums[i2], nums[i]
                i2 -= 1
            else:
                i += 1
```



[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

