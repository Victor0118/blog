---
layout: post
title:  "64. Minimum Path Sum"
date:   2018-05-31 22:00:00
categories: leetcode
---


## Problem Information

> * Link: [Minimum Path SumPermutation Sequence](https://leetcode.com/problems/minimum-path-sum/description/)
> * Source: LeetCode
> * Difficulty: Medium
> * Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.


```
Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
```

## Solution
1. A simple DP

## Complexity Analysis
Time complexity: O(n * m)

## Details
1. The first corner cost should be initialized at the cost itself

## AC Code

``` python
class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m = len(grid)
        n = len(grid[0])
        cost = []
        for i in range(m):
            cost.append([-1] * n)
        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0:
                    cost[i][j] = grid[i][j]
                    
                if i > 0:
                    if cost[i][j] == -1:
                        cost[i][j] = cost[i-1][j] + grid[i][j]
                    else:
                        cost[i][j] = min(cost[i][j], cost[i-1][j] + grid[i][j]) 
                
                
                if j > 0:
                    if cost[i][j] == -1:
                        cost[i][j] = cost[i][j-1] + grid[i][j]
                    else:
                        cost[i][j] = min(cost[i][j], cost[i][j-1] + grid[i][j]) 
                
        print(cost)
        return cost[m-1][n-1]
                    
```



[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

