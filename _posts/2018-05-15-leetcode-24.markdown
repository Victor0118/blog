---
layout: post
title:  "24. Swap Nodes in Pairs 解题报告"
categories: leetcode
---


## 题目信息

> * 链接：[Swap Nodes in Pairs](https://leetcode.com/problems/swap-nodes-in-pairs/description/)
> * 来源：LeetCode
> * 难度：Medium
> * 描述：交换链表每两个相邻的结点，要求空间复杂度O(1)，不能修改结点内容

## 解题思路
1. 交换当前两个结点，根据之后是否还有两个以上结点来决定当前第一个结点的下一个结点，注意判断之后的结点可能有0个，1个或者2个以上

## 复杂度分析

## 细节处理
1. 空链表
2. 单结点链表
3. 奇数结点链表

## AC代码

``` python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head == None:
            return
        if head.next == None:
            return head
        ret = head.next
        a = head
        b = a.next
        while True:
            if b.next != None and b.next.next != None:
                tmp = b.next
                a.next = b.next.next
                b.next = a
                a = tmp
                b = tmp.next
            elif b.next != None:
                a.next = b.next
                b.next = a
                break
            else:
                b.next = a
                a.next = None
                break
        return ret

```

## 心得体会
整体思路其实很清楚，但是实现时有很多地方需要注意。   
所谓成对交换位置，思路上比起“把第n位的node移到当前位置”，更直观   的思路是“如何通过指向的方向把node重新连接一遍”。 举例来看： 0， 1， 2 ： 0指向2， 2指向1， 1指出。
所以为了从第一位上开始转换，需要手动添加dummy-head，作为第零位。   
另外，在赋值过程中，需要一步完成，如果每次赋值一个node，指针会同时移动，不能实现原地的串联过程。   
最后，因为题目要求两两调换位置，所以指针应该一次跳转两位，也就是current  pointer不能跳转到current.next，而应该跳转到已经调换之后的隔位，也就是原来的后面一位。  
（感觉ListNode跳来跳去好麻烦，哪怕这次碰巧写出来了，下一次可能还是不会做TT）   


## AC代码

``` python

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
        dummy = ListNode(0)
        dummy.next = head
        
        cur = dummy
        
        while cur.next and cur.next.next:
            a = cur.next
            b = a.next
            
            cur.next, b.next, a.next = b, a, b.next            
            cur = a
            
        return dummy.next

```



[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

