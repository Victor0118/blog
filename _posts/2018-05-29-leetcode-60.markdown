---
layout: post
title:  "60. Permutation Sequence"
date:   2018-05-29 22:00:00
categories: leetcode
---


## Problem Information

> * Link: [Permutation Sequence](https://leetcode.com/problems/permutation-sequence/description/)
> * Source: LeetCode
> * DifficultyHard
> * Description: The set \[1,2,3,...,n\] contains a total of n! unique permutations.
Given n and k, return the kth permutation sequence.



```
Input: n = 3, k = 3
Output: "213"
```

## Solution
1. Compute the result from higher order digit to lower order digit
2. For each order, consider how many possible conditions after the current order

## Complexity Analysis
Time complexity: O(n)

## Details
1. The edge condition might be optimized. Will take a look at other solution in the future.

## Comment
1. Personally I like this problem. No data structure or fancy algorithm. Just some simple but interesting tricks.

## AC Code

``` python
class Solution(object):
    def getPermutation(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: str
        """
        pos = []
        cand = []
        tmp = 1
        for i in range(1, n + 1):
            if i != n:
                tmp *= i
                pos.append(tmp)
            cand.append(str(i))
        pos = pos[::-1]
        i = 0
        res = ""
        k = k -1
        while True:
            if i != n - 1:
                div = int(k / pos[i])
                res += cand[div]
                cand.pop(div)
                k -= div * pos[i]
                i += 1
            else:
                res += cand[0]
                break
            
        return res
                    
```



[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

