---
layout: post
title:  "866. Smallest Subtree with all the Deepest Nodes"
date:   2018-07-08 10:00:00
categories: leetcode
---


## Problem Information

> * Link: [Populating Next Right Pointers in Each Node](https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/)
> * Source: LeetCode
> * Difficulty: Medium
> * Description: 


```
Given a binary tree rooted at root, the depth of each node is the shortest distance to the root.

A node is deepest if it has the largest depth possible among any node in the entire tree.

The subtree of a node is that node, plus the set of all descendants of that node.

Return the node with the largest depth such that it contains all the deepest nodes in it's subtree.

```

#### Note:

* The number of nodes in the tree will be between 1 and 500.
* The values of each node are unique. 

## Solution:
1. Find all the deepest nodes with the paths
2. Find the deepest common node among all paths

## Complexity Analysis 1
Time complexity: O(N). Space complexity: O(NlogN).

## Edge Case
1. Only one deepest node
2. Only one root node

## Thoughts
1. Path recording is necessary?
2. Backtracking

## AC Code

``` python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = 
#         self.left = None
#         self.right = None

class Solution(object):
    def search(self, node, depth, path):
        if node is None:
            return 0
        path.append(node)
        if not node.left and not node.right:
            if depth > self.deepest:
                self.deepest = depth
                self.result_paths = [path[:]]
            elif depth == self.deepest:
                self.result_paths.append(path[:])
        else:
            self.search(node.left, depth + 1, path)
            self.search(node.right, depth + 1, path)
        del(path[-1])    
    
    def subtreeWithAllDeepest(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        self.result_paths = []
        self.deepest = 0
        self.search(root, 0, [])
        if len(self.result_paths) == 1:
            return self.result_paths[0][-1]
        for i in range(1, self.deepest + 1):
            for j in range(1, len(self.result_paths)):
                if self.result_paths[j][i] != self.result_paths[0][i]:
                    return self.result_paths[j][i - 1]
        print(self.result_paths)
        return self.result_paths[len(self.result_paths) - 1][-1]
        
```



[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

