---
layout: post
title:  "74. Word Search"
date:   2018-06-05 22:00:00
categories: leetcode
---


## Problem Information

> * Link: [Word Search](https://leetcode.com/problems/word-search/description/)
> * Source: LeetCode
> * Difficulty: Medium
> * Given a 2D board and a word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.
```
board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.
```

## Solution
1. Typical DFS

## Complexity Analysis
Time complexity: O(m * n * len(word)). Much less in pratice.


## AC Code

``` python
class Solution(object):
    def search(self, board, word, visit, i, j):
        if word[0] != board[i][j]:
            return False
        elif len(word) == 1:
            return True
        visit[i][j] = True
        if i + 1 < self.n and not visit[i + 1][j]:
            if self.search(board, word[1:], visit, i + 1, j):
                return True
        if i - 1 >= 0 and not visit[i - 1][j]:
            if self.search(board, word[1:], visit, i - 1, j):
                return True    
        if j + 1 < self.m and not visit[i][j + 1]:
            if self.search(board, word[1:], visit, i, j + 1):
                return True
        if j - 1 >= 0 and not visit[i][j - 1]:
            if self.search(board, word[1:], visit, i, j - 1):
                return True   
        visit[i][j] = False
        return False
        
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        self.n = len(board)
        self.m = len(board[0])
        visit = [[False] * self.m for k in range(self.n)] # if this is in for loop, you will get a Time Limit Exceeded error
        for i in range(self.n):
            for j in range(self.m):
                if self.search(board, word, visit, i, j):
                    return True
        return False
```



[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

